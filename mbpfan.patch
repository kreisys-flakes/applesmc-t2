diff --git a/src/mbpfan.c b/src/mbpfan.c
index 1916d64..ac7cfbc 100644
--- a/src/mbpfan.c
+++ b/src/mbpfan.c
@@ -41,6 +41,7 @@
 #include <sys/types.h>
 #include <sys/utsname.h>
 #include <sys/errno.h>
+#include <linux/limits.h>
 #include "mbpfan.h"
 #include "global.h"
 #include "settings.h"
@@ -51,7 +52,7 @@
 #define max(a,b) ((a) > (b) ? (a) : (b))
 
 #define CORETEMP_PATH "/sys/devices/platform/coretemp.0"
-#define APPLESMC_PATH "/sys/devices/platform/applesmc.768"
+#define APPLESMC_PATH "/sys/bus/acpi/devices/APP0001:00"
 
 /* temperature thresholds
  * low_temp - temperature below which fan speed will be at minimum
@@ -274,7 +275,7 @@ t_fans *retrieve_fans()
     char *path_fan_max = NULL;
     char *path_fan_min = NULL;
 
-    const char *path_begin = "/sys/devices/platform/applesmc.768/fan";
+    const char *path_begin = smprintf("%s/%s", APPLESMC_PATH, "fan");
     const char *path_output_end = "_output";
     const char *path_label_end = "_label";
     const char *path_man_end = "_manual";
@@ -289,8 +290,8 @@ t_fans *retrieve_fans()
         path_output = smprintf("%s%d%s", path_begin, counter, path_output_end);
         path_label = smprintf("%s%d%s", path_begin, counter, path_label_end);
         path_manual = smprintf("%s%d%s", path_begin, counter, path_man_end);
-	path_fan_min = smprintf("%s%d%s",path_begin, counter, path_min_speed);
-	path_fan_max = smprintf("%s%d%s",path_begin, counter, path_max_speed);
+        path_fan_min = smprintf("%s%d%s",path_begin, counter, path_min_speed);
+        path_fan_max = smprintf("%s%d%s",path_begin, counter, path_max_speed);
 
         FILE *file = fopen(path_output, "w");
 
@@ -557,7 +558,11 @@ void check_requirements(const char* program_path)
     closedir(dir);
 
 
-    dir = opendir(APPLESMC_PATH);
+    char resolved_path[PATH_MAX];
+    realpath(APPLESMC_PATH, resolved_path);
+
+    mbp_log(LOG_ERR, "%s ", resolved_path);
+    dir = opendir(resolved_path);
 
     if (ENOENT == errno) {
         mbp_log(LOG_ERR, "%s needs applesmc support. Please either load it or build it into the kernel. Exiting.", program_path);
